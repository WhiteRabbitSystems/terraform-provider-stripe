package main

import (
	"context"
	"fmt"
	shared "github.com/andrewbaxter/terraform-provider-stripe/shared"
	cty "github.com/hashicorp/go-cty/cty"
	diag "github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	schema "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resources_terminal_readers() *schema.Resource {
	return &schema.Resource{
		CreateContext: func(ctx context.Context, d *schema.ResourceData, f0 any) diag.Diagnostics {
			f := f0.(*Facilitator)
			out := diag.Diagnostics{}
			params := map[string]any{}
			if v, exists := d.GetOk("label"); exists {
				params["label"] = v
			}
			if v, exists := d.GetOk("location"); exists {
				params["location"] = v
			}
			{
				v := d.Get("registration_code")
				params["registration_code"] = v
			}
			res, err := f.Post(ctx, "/v1/terminal/readers", params)
			if err != nil {
				out = append(out, diag.Diagnostic{
					AttributePath: cty.Path{},
					Severity:      diag.Error,
					Summary:       fmt.Sprintf("failed to create new terminal.reader: %s", err),
				})
				return out
			}
			d.SetId(shared.Dig[string](res, "id"))
			return out
		},
		DeleteContext: func(ctx context.Context, d *schema.ResourceData, f0 any) diag.Diagnostics {
			f := f0.(*Facilitator)
			out := diag.Diagnostics{}
			err := f.Delete(ctx, fmt.Sprintf("/v1/terminal/readers/%v", d.Get("id")))
			if err != nil {
				out = append(out, diag.Diagnostic{
					AttributePath: cty.Path{},
					Severity:      diag.Error,
					Summary:       fmt.Sprintf("failed to delete terminal.reader %s: %s", d.Id(), err),
				})
				return out
			}
			return out
		},
		ReadContext: func(ctx context.Context, d *schema.ResourceData, f0 any) diag.Diagnostics {
			f := f0.(*Facilitator)
			out := diag.Diagnostics{}
			res, err := f.Get(ctx, fmt.Sprintf("/v1/terminal/readers/%v", d.Get("id")))
			if err != nil {
				out = append(out, diag.Diagnostic{
					AttributePath: cty.Path{},
					Severity:      diag.Error,
					Summary:       fmt.Sprintf("failed to look up terminal.reader %s: %s", d.Id(), err),
				})
				return out
			}
			d.Set("label", shared.Dig[any](res, "label"))
			d.Set("location", shared.Dig[any](res, "location"))
			d.Set("registration_code", shared.Dig[any](res, "registration_code"))
			return out
		},
		Schema: map[string]*schema.Schema{
			"label": {
				Description: "Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.",
				ForceNew:    false,
				Required:    false,
				Type:        schema.TypeString,
			},
			"location": {
				Description: "The location to assign the reader to.",
				ForceNew:    true,
				Required:    false,
				Type:        schema.TypeString,
			},
			"registration_code": {
				Description: "A code generated by the reader used for registering to an account.",
				ForceNew:    true,
				Required:    true,
				Type:        schema.TypeString,
			},
		},
		UpdateContext: func(ctx context.Context, d *schema.ResourceData, f0 any) diag.Diagnostics {
			f := f0.(*Facilitator)
			out := diag.Diagnostics{}
			params := map[string]any{}
			if d.HasChange("label") {
				v := d.Get("label")
				params["label"] = v
			}
			_, err := f.Post(ctx, fmt.Sprintf("/v1/terminal/readers/%v", d.Get("id")), params)
			if err != nil {
				out = append(out, diag.Diagnostic{
					AttributePath: cty.Path{},
					Severity:      diag.Error,
					Summary:       fmt.Sprintf("failed to update terminal.reader %s: %s", d.Id(), err),
				})
				return out
			}
			return out
		},
	}
}
